<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Asswei&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://asswei7.github.io/"/>
  <updated>2021-09-16T01:11:27.398Z</updated>
  <id>https://asswei7.github.io/</id>
  
  <author>
    <name>孙书玮</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://asswei7.github.io/2021/09/16/%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E6%8A%80%E5%B7%A7/"/>
    <id>https://asswei7.github.io/2021/09/16/%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E6%8A%80%E5%B7%A7/</id>
    <published>2021-09-16T01:11:27.398Z</published>
    <updated>2021-09-16T01:11:27.398Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://asswei7.github.io/2021/09/16/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://asswei7.github.io/2021/09/16/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2021-09-16T01:08:09.437Z</published>
    <updated>2021-09-16T01:08:09.437Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://asswei7.github.io/2021/07/16/%E4%B8%80%E6%9D%A1%E6%9C%A8%E5%92%B8%E9%B1%BC/%E7%BA%AA%E6%99%93%E5%B2%9A/"/>
    <id>https://asswei7.github.io/2021/07/16/%E4%B8%80%E6%9D%A1%E6%9C%A8%E5%92%B8%E9%B1%BC/%E7%BA%AA%E6%99%93%E5%B2%9A/</id>
    <published>2021-07-16T07:45:40.456Z</published>
    <updated>2021-07-21T07:05:30.257Z</updated>
    
    <content type="html"><![CDATA[<p>“F:\Nodejs\node_global\node_modules\hexo\README.md”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“F:\Nodejs\node_global\node_modules\hexo\README.md”&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>拿破仑</title>
    <link href="https://asswei7.github.io/2021/02/27/%E6%8B%BF%E7%A0%B4%E4%BB%91/%E6%8B%BF%E7%A0%B4%E4%BB%91/"/>
    <id>https://asswei7.github.io/2021/02/27/%E6%8B%BF%E7%A0%B4%E4%BB%91/%E6%8B%BF%E7%A0%B4%E4%BB%91/</id>
    <published>2021-02-27T07:25:35.000Z</published>
    <updated>2021-03-25T12:12:36.596Z</updated>
    
    <content type="html"><![CDATA[<ol><li>出生<br>少时性格孤僻，一个人在家中看书。如果有人欺负他，一定会大打出手。父亲有贵族身份，进入好的学校学习。1789年法国大革命，将皇帝路易十六杀头，欧洲几个国家的皇帝联合反法，拿破仑从军，由于法国军队节节败退，法国出现内乱，土伦是法国南部的重要港口，一旦失守，英国可以从此登陆法国，拿破仑当上了炮兵的指挥官，收复了土伦港口。</li></ol><p>拿破仑打败了意大利、奥地利，击败了第一次反法同盟，保卫了法国的革命果实。</p><ol><li>称帝<br>由于法国是共和国，到处帮助别的国家革命，宣传自己的先进制度。拿破仑组建一个强大的舰队，英国试图阻止，但被狂风卷走搁浅。拿破仑去远征埃及，纳尔逊封锁港口，拿破仑写给老婆的信被英军截获，得知其老婆出轨。1799年拿破仑放弃埃及军队，一个人偷偷返回巴黎，发动雾月政变，法国从共和国变成了帝国，本来该由教皇戴皇冠，但是拿破仑厌恶教皇。<br>1805年，拿破仑把自己加冕为意大利国王，侵犯了奥地利的利益，奥地利联合俄国反法，奥斯特里茨之战，拿破仑派人求和，让沙皇膨胀最终获胜。</li></ol><ol><li>远征俄罗斯<br>1807年，西班牙内乱，影响法国的利益，拿破仑拥立自己哥哥当西班牙国王，西班牙反对，英国联合西班牙反法，奥地利从东线攻打法国，拿破仑从西边撤退打败奥地利，签订《维也纳合约》，法国第一帝国达到了鼎盛。</li></ol><p>1812年拿破仑远征俄罗斯，到处都是荒芜，得不到补给，9月拿破仑到达莫斯科郊外，<br>遭遇顽强抵抗，攻入莫斯科，城市已经被火烧。</p><p>俄国在拿破仑返回途中埋伏，并且被寒冬击败。此时，奥地利和普鲁士对拿破仑出兵，击败三国联军，英国人在西线攻打法国。<br>1814年各国联军进入巴黎，拿破仑被迫退位，流放厄尔巴岛，拿破仑之后逃跑，登录法国，法国皇帝派军攻打拿破仑，却倒戈，拿破仑再次称帝。</p><p>再次反法同盟会战，滑铁卢会战。拿破仑流放到圣赫那拉岛，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;出生&lt;br&gt;少时性格孤僻，一个人在家中看书。如果有人欺负他，一定会大打出手。父亲有贵族身份，进入好的学校学习。1789年法国大革命，将皇帝路易十六杀头，欧洲几个国家的皇帝联合反法，拿破仑从军，由于法国军队节节败退，法国出现内乱，土伦是法国南部的重要港口，一旦失守
      
    
    </summary>
    
    
    
      <category term="历史" scheme="https://asswei7.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>极简英语史</title>
    <link href="https://asswei7.github.io/2021/01/29/%E6%9E%81%E7%AE%80%E8%8B%B1%E8%AF%AD%E5%8F%B2/%E6%9E%81%E7%AE%80%E8%8B%B1%E8%AF%AD%E5%8F%B2/"/>
    <id>https://asswei7.github.io/2021/01/29/%E6%9E%81%E7%AE%80%E8%8B%B1%E8%AF%AD%E5%8F%B2/%E6%9E%81%E7%AE%80%E8%8B%B1%E8%AF%AD%E5%8F%B2/</id>
    <published>2021-01-29T13:56:41.000Z</published>
    <updated>2021-02-27T07:26:21.313Z</updated>
    
    <content type="html"><![CDATA[<p>汉朝时匈奴西迁，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;汉朝时匈奴西迁，&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://asswei7.github.io/2021/01/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://asswei7.github.io/2021/01/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-01-29T01:25:11.000Z</published>
    <updated>2021-01-29T14:06:02.305Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><strong>定义：</strong><br>确保一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p><p><strong>类的实例成员和静态成员：</strong><br>类的静态成员每个类只有一个，非静态成员每个对象一个。</p><p>静态成员属于这个类，非静态成员属于这个类的实例对象。</p><p><strong>分析：</strong><br>由于只有一个实例，其构造方法一定不能为public，即不能被外界进行实例化。</p><p>并且该实例是这个类的静态成员变量，属于这个类。并且要提供一个静态方法，向外界提供这个实例。</p><p><strong>应用：</strong><br>确保一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p><p>比如：序列号生成器，Web页面计数器。或者创建一个对象需要消耗很多的资源，比如访问IO，数据库资源，也可以使用。</p><p>饿汉式：在类加载时就进行类的实例化。<br>懒汉式：在类的第一次使用（调用其静态方法）时进行实例化。</p><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p><strong>定义：</strong><br>属于类创建型模式。根据参数的不同返回不同类的实例。专门定义一个类负责创建其他类的实例，被创建的实例通常具有共同的父类。</p><p><strong>分析：</strong><br>工厂类知道每一个产品，知道哪一个产品应该被实例化。</p><p><strong>缺点：</strong><br>不够灵活，产品很多时，需要修改工厂的判断逻辑。</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂不再负责所有产品的创建，而是交给子工厂，子工厂负责生成具体的产品对象。新增一个产品，不需要修改工厂的逻辑，但是需要新增一个子工厂。</p><p>开闭原则：对于扩展是开放的，对于修改是封闭的。就像原来是生产拖拉机的生产线，是将其修改为生产口罩还是新增一个生产口罩的生产线好？扩展优于修改。</p><p><strong>定义：</strong><br>定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;br&gt;确保一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端</title>
    <link href="https://asswei7.github.io/2021/01/29/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF/"/>
    <id>https://asswei7.github.io/2021/01/29/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF/</id>
    <published>2021-01-29T01:19:01.000Z</published>
    <updated>2021-02-27T07:26:24.405Z</updated>
    
    <content type="html"><![CDATA[<p>侵入式和非侵入式：<br>假设大家都想要把用户代码塞到一个框架里。侵入式的做法就是要求用户代码“知道”框架的代码，表现为用户代码需要继承框架提供的类。非侵入式则不需要用户代码引入框架代码的信息，从类的编写者角度来看，察觉不到框架的存在。<br>例如：<br>使用struts的时候，我需要继承一些struts的类，这时struts侵入到了我的代码里。<br>使用spring，编写一些业务类的时候不需要继承spring特定的类，通过配置完成依赖注入后就可以使用，此时，spring就没有侵入到我业务类的代码里。</p><p>侵入式让用户代码产生对框架的依赖，这些代码不能在框架外使用，不利于代码的复用。但侵入式可以使用户跟框架更好的结合，更容易更充分的利用框架提供的功能。<br>非侵入式的代码则没有过多的依赖，可以很方便的迁移到其他地方。但是与用户代码互动的方式可能就比较复杂。</p><p>反射的作用：<br>1）在运行时判断任意一个对象所属的类。<br>2）在运行时构造任意一个类的对象。<br>3）在运行时判断任意一个类所具有的成员变量和方法。<br>4）在运行时调用任意一个对象的方法</p><p>反射就是把Java类中的各个部分，映射成一个个的Java对象，拿到这些对象后可以做一些事情。</p><p>既然说反射是反射Java类中的各个组成部分，所以说咱们得知道一个类中有哪儿些部分？</p><p>例如，一个类有：成员变量，方法，构造方法，等信息，利用反射技术咱们可以把这些组成部分映射成一个个对象。<br><a href="https://blog.csdn.net/Appleyk/article/details/77879073?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control">https://blog.csdn.net/Appleyk/article/details/77879073?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;侵入式和非侵入式：&lt;br&gt;假设大家都想要把用户代码塞到一个框架里。侵入式的做法就是要求用户代码“知道”框架的代码，表现为用户代码需要继承框架提供的类。非侵入式则不需要用户代码引入框架代码的信息，从类的编写者角度来看，察觉不到框架的存在。&lt;br&gt;例如：&lt;br&gt;使用struts
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>经济危机</title>
    <link href="https://asswei7.github.io/2021/01/27/%E7%BB%8F%E6%B5%8E%E5%8D%B1%E6%9C%BA/%E7%BB%8F%E6%B5%8E%E5%8D%B1%E6%9C%BA/"/>
    <id>https://asswei7.github.io/2021/01/27/%E7%BB%8F%E6%B5%8E%E5%8D%B1%E6%9C%BA/%E7%BB%8F%E6%B5%8E%E5%8D%B1%E6%9C%BA/</id>
    <published>2021-01-27T04:00:23.000Z</published>
    <updated>2021-01-29T01:19:21.222Z</updated>
    
    <content type="html"><![CDATA[<p>首先大量债务违约，房贷无法偿还，随后银行倒闭，金融市场恐慌，资本逃离，制造业银根断裂，失业紧跟而至。</p><p>经济危机：消费者的购买力过剩，根本原因是生产的社会化和生产资料私人占有之间的矛盾。</p><p>资本家没有需求去消费那么多商品，而真正有需求的普通大众日渐支付不起属于资本家的商品，市场的失调就此产生，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先大量债务违约，房贷无法偿还，随后银行倒闭，金融市场恐慌，资本逃离，制造业银根断裂，失业紧跟而至。&lt;/p&gt;
&lt;p&gt;经济危机：消费者的购买力过剩，根本原因是生产的社会化和生产资料私人占有之间的矛盾。&lt;/p&gt;
&lt;p&gt;资本家没有需求去消费那么多商品，而真正有需求的普通大众日渐支
      
    
    </summary>
    
    
      <category term="经济危机" scheme="https://asswei7.github.io/categories/%E7%BB%8F%E6%B5%8E%E5%8D%B1%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>安史之乱</title>
    <link href="https://asswei7.github.io/2021/01/27/%E5%AE%89%E5%8F%B2%E4%B9%8B%E4%B9%B1/%E5%AE%89%E5%8F%B2%E4%B9%8B%E4%B9%B1/"/>
    <id>https://asswei7.github.io/2021/01/27/%E5%AE%89%E5%8F%B2%E4%B9%8B%E4%B9%B1/%E5%AE%89%E5%8F%B2%E4%B9%8B%E4%B9%B1/</id>
    <published>2021-01-27T02:51:06.000Z</published>
    <updated>2021-01-27T03:37:09.307Z</updated>
    
    <content type="html"><![CDATA[<p>唐朝历史的转折点，也是中国历史的转折点。<br>公元618年李渊建立唐朝，安史之乱前总人口大约8000万，而且人均粮食占有量极高。<br>唐玄宗李隆基唐代第七位皇帝，初期勤政，提倡节俭，开元之治。<br>执政中期，不再专心政务，潜心钻研声乐歌舞，</p><p>节度使：是唐朝为了维持对外用兵或者镇守边关设置的官职，后期由于土地兼并，许多农民失去土地变成流民，只能变为募兵制，军队的开销就大幅增加，中央无法供给。就让边境的军队自给自足，节度使就掌管了军事、行政、民政、财政以及生产和税收。导致边境士兵“唯知其将之恩威而不知有天子”。怛罗斯战役，唐朝碰到了阿拉伯帝国，停止向西扩张。</p><p>唐朝宰相张九龄被李林甫代替，任人唯亲，导致中央的实力逐渐消弱。安禄山通过贿赂官员洗脱罪责，并表演胡旋舞得到了唐玄宗的注意，李林甫投其所好，推举安禄山为东北三镇节度使。李林甫死后，杨国忠为新的宰相，安禄山作为李林甫的党羽，与杨国忠交恶。</p><p>安禄山意识到中央实力削弱，并且自身受到威胁，下定决心发动兵变。安禄山以忧国之危奉密诏讨伐杨国忠为借口，在范阳（北京）起兵。皇帝令儿子李琬为元帅，高仙芝为副帅东征，保卫洛阳。<br>然后洛阳失守，坚守潼关，等待边关节度使调回大军。然而朝中文官忌惮武将立功，进谗言，皇帝以避战不出的罪名处斩高仙芝，哥舒翰继任。皇帝又逼迫他出城决战，安禄山设伏剿灭守军。玄宗逃出长安，向蜀地而去。</p><p>由于安禄山是湖人，中央逐渐排外，从包容变得保守，开始封闭自我，减少交流。</p><p>由于逃亡路上保卫皇帝的士兵没有食物，怨声载道，将怒气发向杨国忠，将其杀死，皇帝为了保护自己杀死杨玉环。太子李亨和李隆基关系不好，率兵向北逃亡。逃到宁夏，与各地节度使接洽，自称唐肃宗，说李隆基为太上皇，而玄宗在四川控制兵力不足两千，只得接受现实。肃宗在灵武封郭子仪为兵部尚书，李光弼为户部尚书，反击。 安禄山被儿子安庆绪灭掉，安庆绪想控制江南，睢阳是运河上的关键节点，若被攻陷，中央和江南的联系就会被掐断，但是张巡兵力仅有六千。坚守了一年，是转折点。</p><p>之后，肃宗收复长安，收复洛阳，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;唐朝历史的转折点，也是中国历史的转折点。&lt;br&gt;公元618年李渊建立唐朝，安史之乱前总人口大约8000万，而且人均粮食占有量极高。&lt;br&gt;唐玄宗李隆基唐代第七位皇帝，初期勤政，提倡节俭，开元之治。&lt;br&gt;执政中期，不再专心政务，潜心钻研声乐歌舞，&lt;/p&gt;
&lt;p&gt;节度使：是唐
      
    
    </summary>
    
    
      <category term="思维实验室" scheme="https://asswei7.github.io/categories/%E6%80%9D%E7%BB%B4%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>战国四大名将</title>
    <link href="https://asswei7.github.io/2021/01/25/%E6%88%98%E5%9B%BD%E5%9B%9B%E5%A4%A7%E5%90%8D%E5%B0%86/%E6%88%98%E5%9B%BD%E5%9B%9B%E5%A4%A7%E5%90%8D%E5%B0%86/"/>
    <id>https://asswei7.github.io/2021/01/25/%E6%88%98%E5%9B%BD%E5%9B%9B%E5%A4%A7%E5%90%8D%E5%B0%86/%E6%88%98%E5%9B%BD%E5%9B%9B%E5%A4%A7%E5%90%8D%E5%B0%86/</id>
    <published>2021-01-25T06:53:04.000Z</published>
    <updated>2021-09-15T13:46:14.968Z</updated>
    
    <content type="html"><![CDATA[<h3 id="李牧-赵"><a href="#李牧-赵" class="headerlink" title="李牧(赵)"></a>李牧(赵)</h3><ol><li><p>坚壁清野<br>开始在北方抵御匈奴，采取坚壁清野(加固城墙的同时，把城外的植物水源统统破坏)的策略，但赵孝成王不满，去和匈奴硬打，战败，重新启用李牧。李牧大败匈奴。</p></li><li><p>防卫秦国<br>秦国派<strong>桓齮</strong>攻打赵国，一路高歌猛进，被李牧坚守不出打不过，被李牧打败。<br>嬴政启用<strong>王翦</strong>，收买了赵国重臣<strong>郭开</strong>，赵王杀害了李牧。王翦攻破赵国。</p></li></ol><h3 id="廉颇（赵）"><a href="#廉颇（赵）" class="headerlink" title="廉颇（赵）"></a>廉颇（赵）</h3><p>先打齐，又打魏，后打秦。<br>因为上党郡，和秦国僵持，一守就是三年。<br>廉颇攻打魏国，郭开进谗言，将廉颇革职，廉颇投奔魏国。后来赵王去请廉颇回来，使者被郭开拦下，最后在楚国郁郁而终。</p><h3 id="王翦（秦）"><a href="#王翦（秦）" class="headerlink" title="王翦（秦）"></a>王翦（秦）</h3><ol><li><p>早期比较低调，帮助宰相范雎干掉他的仇人。然后帮助嬴政解决他弟弟的叛乱。又帮助嬴政收拾吕不韦和嫪毐。</p></li><li><p>嬴政即位后<br>第一场灭赵国。然后荆轲刺秦，王翦灭燕国，燕王逃到辽东，最后被其儿子王贲灭掉。第三场王贲放水灭了魏国。第四场灭楚国，李信先去灭楚，被项燕打败。王翦带60万打楚国。第五场打齐国。</p></li></ol><h3 id="白起（秦）"><a href="#白起（秦）" class="headerlink" title="白起（秦）"></a>白起（秦）</h3><ol><li>战必全歼，战国死亡人数两百多万，一半死在他的手上。<br>包围魏韩联军主力，斩杀24万人，伊阙之战。<br>攻打楚国，放水淹死数十万人，鄢郢之战。<br>攻打赵魏进攻韩国的联军，斩杀13万，华阳之战。<br>攻打韩国，占领野王，切断韩国和上党郡的联系，引发长平之战。<br>韩赵两国联手贿赂范雎，把白起撤下，救了赵国。后来秦国一直打败仗，白起依旧称病不带兵，引起秦王暴怒。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;李牧-赵&quot;&gt;&lt;a href=&quot;#李牧-赵&quot; class=&quot;headerlink&quot; title=&quot;李牧(赵)&quot;&gt;&lt;/a&gt;李牧(赵)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;坚壁清野&lt;br&gt;开始在北方抵御匈奴，采取坚壁清野(加固城墙的同时，把城外的植物水源统统破坏)的策略，但
      
    
    </summary>
    
    
      <category term="历史" scheme="https://asswei7.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>屠龙之术</title>
    <link href="https://asswei7.github.io/2021/01/14/%E5%B1%A0%E9%BE%99%E4%B9%8B%E6%9C%AF/%E5%B1%A0%E9%BE%99%E4%B9%8B%E6%9C%AF/"/>
    <id>https://asswei7.github.io/2021/01/14/%E5%B1%A0%E9%BE%99%E4%B9%8B%E6%9C%AF/%E5%B1%A0%E9%BE%99%E4%B9%8B%E6%9C%AF/</id>
    <published>2021-01-14T11:23:09.000Z</published>
    <updated>2021-01-14T11:34:13.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="故事背景与作者的反思"><a href="#故事背景与作者的反思" class="headerlink" title="故事背景与作者的反思"></a>故事背景与作者的反思</h3><p>屠龙术的故事源于庄子的《列御寇》，它只有简单的一句话：</p><blockquote><p>朱泙漫学屠龙于支离益，单千金之家，三年技成而无所用其巧。</p></blockquote><p>作者的反思：</p><blockquote><p>朱泙漫到底是谁？支离益又是谁？他们的名字为什么这么奇怪？<br><br>如果这世上本无龙，支离益为什么能教屠龙术？是因为这世上原本是有龙的，支离益曾是一名屠龙的勇士？亦或者支离益就是个骗子？<br><br>而朱泙漫又为什么肯耗尽千金家产，要学习屠龙术？他背后有怎样的故事？是不是他知道，这世界还有恶龙隐藏？<br><br>朱泙漫是怎么用三年时间学成屠龙术的？他是怎么练习的？又怎么在三年后认为自己已经学成了？<br>当朱泙漫学成了屠龙术，去做了什么？他游历了哪里，遇到了谁？庄子的世界里，真的没有龙吗？会不会像所有的童话故事一样，朱泙漫经历了一场恶战，杀掉了这世上的最后一条恶龙，从此归隐山林，不为人知？<br><br>这世界上真正的英雄不为人知，反被耻笑。直到突然有一天，又一只恶龙不知从哪里冒了出来。这似乎是很多英雄故事的套路。朱泙漫的故事是否也是如此？<br><br>后来呢？后来呢？</p></blockquote><h3 id="堂吉诃德"><a href="#堂吉诃德" class="headerlink" title="堂吉诃德"></a>堂吉诃德</h3><h3 id="没有龙就是最大的恶龙"><a href="#没有龙就是最大的恶龙" class="headerlink" title="没有龙就是最大的恶龙"></a>没有龙就是最大的恶龙</h3><p>想到了墨菲定律，即你觉得最困难的事情一定会发生。可以从博弈论的角度来看，对手会想尽办法让你难受，所以最困难的事情一定会发生。</p><p><br>想到了毛主席，居安思危，很有前瞻性地将义勇军进行曲作为国歌，认为我们永远处于危机之中，永远不能放松警惕。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;故事背景与作者的反思&quot;&gt;&lt;a href=&quot;#故事背景与作者的反思&quot; class=&quot;headerlink&quot; title=&quot;故事背景与作者的反思&quot;&gt;&lt;/a&gt;故事背景与作者的反思&lt;/h3&gt;&lt;p&gt;屠龙术的故事源于庄子的《列御寇》，它只有简单的一句话：&lt;/p&gt;
&lt;block
      
    
    </summary>
    
    
      <category term="技术类随笔" scheme="https://asswei7.github.io/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>不来也不去</title>
    <link href="https://asswei7.github.io/2021/01/11/%E4%B8%8D%E6%9D%A5%E4%B9%9F%E4%B8%8D%E5%8E%BB/%E4%B8%8D%E6%9D%A5%E4%B9%9F%E4%B8%8D%E5%8E%BB/"/>
    <id>https://asswei7.github.io/2021/01/11/%E4%B8%8D%E6%9D%A5%E4%B9%9F%E4%B8%8D%E5%8E%BB/%E4%B8%8D%E6%9D%A5%E4%B9%9F%E4%B8%8D%E5%8E%BB/</id>
    <published>2021-01-11T13:17:21.000Z</published>
    <updated>2021-01-11T13:21:08.210Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>扬帆时 人潮没有你<br>我是我 和途人一起<br>停顿时 在你笑开的眼眉<br>望穿秋水之美</p></blockquote><p>人生的旅途中没有你了，一个人去很热闹的地方，突然看到一个美。</p><blockquote><p>回程时 浪淘尽了你<br>任背影 长睡着不起<br>留下我 在粪土当中<br>翻检背囊 直到拾回自己<br>掌心因此多出一根刺<br>没有刺痛便懒知<br>就当共你 有旧情没有往事</p></blockquote><p>如烟 因给你递过火<br>如火 却也没熔掉我<br>回望最初 当丧失是得着可不可<br>可痛若骊歌 乐如儿歌<br>像你没来过 没去过<br>谁同行 仍同样结尾<br>血液里 才遗传悲喜<br>谁亦难 避过这一身客尘<br>但刚巧出於你<br>垂头前 没缘份丧气<br>睡到醒 才站立得起<br>盲目过 便看到天机<br>反覆往来 又再做回自己<br>即使一生多出一根刺 没有刺痛别要知<br>就当共你 有剧情没有故事<br>如烟 因给你递过火<br>如火 却也没熔掉我<br>回望最初 当丧失是得着可不可<br>可痛若骊歌 乐如儿歌<br>像你没来过 没去过<br>如花 超生了没有果<br>如果 过路能重踏过<br>就当最初 是碎步湖上可不可<br>不种下甚麽 摘来甚麽<br>像我没来过 没去过</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;扬帆时 人潮没有你&lt;br&gt;我是我 和途人一起&lt;br&gt;停顿时 在你笑开的眼眉&lt;br&gt;望穿秋水之美&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人生的旅途中没有你了，一个人去很热闹的地方，突然看到一个美。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;回程时 
      
    
    </summary>
    
    
      <category term="音乐" scheme="https://asswei7.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
  </entry>
  
  <entry>
    <title>最佳损友</title>
    <link href="https://asswei7.github.io/2021/01/11/%E6%9C%80%E4%BD%B3%E6%8D%9F%E5%8F%8B/%E6%9C%80%E4%BD%B3%E6%8D%9F%E5%8F%8B/"/>
    <id>https://asswei7.github.io/2021/01/11/%E6%9C%80%E4%BD%B3%E6%8D%9F%E5%8F%8B/%E6%9C%80%E4%BD%B3%E6%8D%9F%E5%8F%8B/</id>
    <published>2021-01-11T12:33:58.000Z</published>
    <updated>2021-01-11T13:02:54.343Z</updated>
    
    <content type="html"><![CDATA[<p>杨千嬅和黄伟文。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;杨千嬅和黄伟文。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="音乐" scheme="https://asswei7.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
  </entry>
  
  <entry>
    <title>无条件</title>
    <link href="https://asswei7.github.io/2021/01/11/%E6%97%A0%E6%9D%A1%E4%BB%B6/%E6%97%A0%E6%9D%A1%E4%BB%B6/"/>
    <id>https://asswei7.github.io/2021/01/11/%E6%97%A0%E6%9D%A1%E4%BB%B6/%E6%97%A0%E6%9D%A1%E4%BB%B6/</id>
    <published>2021-01-11T12:30:12.000Z</published>
    <updated>2021-01-11T13:15:48.084Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你 何以始终不说话 尽管讲出不快吧<br>事与冀盼有落差 请不必惊怕<br>我 仍然会冷静聆听<br>仍然紧守于身边 与你进退也共鸣</p><p>时日会蔓延再蔓延 某些不可改变的改变<br>与一些不要发现的发现 就这么放大了缺点<br>来让我问谁可决定 那些东西叫作完美至善<br>我只懂得 爱你在每天</p></blockquote><p>日久见人心，放大了你身上的缺点。<br>但是没有一个标准评价什么人是完美的，我就认为你是最好的。</p><blockquote><p>当潮流爱新鲜 当旁人爱标签<br>幸得伴着你我 是窝心的自然<br>当闲言再尖酸 给他妒忌多点<br>因世上的至爱 是不计较条件 谁又可清楚看见</p></blockquote><p>我爱你不是跟随潮流，而是漫长的一件事。</p><blockquote><p>美 难免总有些缺憾 若果不甘心去问<br>问到最尾叫内心 也长出裂痕<br>笑 何妨与你又重温<br>仍然我说我庆幸 你永远胜过别人</p><p>期待美没完爱没完 放开不必打算的打算<br>作一些可以约定的约定 就抱紧以后每一天<br>其实你定然都发现 我有很多未达完美事情<br>我只懂得 再努力每天</p><p>当潮流爱新鲜 当旁人爱标签<br>幸得伴着你我 是窝心的自然<br>当闲言再尖酸 给他妒忌多点<br>因世上的至爱 是不计较条件 谁又可清楚看见</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;你 何以始终不说话 尽管讲出不快吧&lt;br&gt;事与冀盼有落差 请不必惊怕&lt;br&gt;我 仍然会冷静聆听&lt;br&gt;仍然紧守于身边 与你进退也共鸣&lt;/p&gt;
&lt;p&gt;时日会蔓延再蔓延 某些不可改变的改变&lt;br&gt;与一些不要发现的发现 就这么放大了缺点&lt;br&gt;来让我问谁
      
    
    </summary>
    
    
      <category term="音乐" scheme="https://asswei7.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
  </entry>
  
  <entry>
    <title>单车</title>
    <link href="https://asswei7.github.io/2021/01/11/%E5%8D%95%E8%BD%A6/%E5%8D%95%E8%BD%A6/"/>
    <id>https://asswei7.github.io/2021/01/11/%E5%8D%95%E8%BD%A6/%E5%8D%95%E8%BD%A6/</id>
    <published>2021-01-11T12:30:12.000Z</published>
    <updated>2021-07-23T01:52:04.538Z</updated>
    
    <content type="html"><![CDATA[<p>不要不要假设我知道<br>一切一切也都是为我而做<br>为何这么伟大<br>如此感觉不到</p><blockquote><p>不说一句的爱有多好<br>只有一次记得实在接触到<br>骑着单车的我俩<br>怀紧贴背的拥抱</p></blockquote><p>不会表达爱意的父亲形象，</p><p>难离难舍想抱紧些<br>茫茫人生好像荒野<br>如孩儿能伏于爸爸的肩膊<br>谁要下车<br>难离难舍总有一些<br>常情如此不可推卸<br>任世间再冷酷<br>想起这单车还有幸福可借</p><blockquote><p>经已给我怎会看不到<br>虽说演你角色实在有难度<br>从来虚位以待<br>何不给个拥抱<br>想我怎去相信这一套<br>多疼惜我却不便让我知道<br>怀念单车给你我<br>唯一有过的拥抱</p><p>难离难舍想抱紧些<br>茫茫人生好像荒野<br>如孩儿能伏于爸爸的肩膊<br>哪怕遥遥长路多斜<br>你爱我爱多些<br>让我他朝走得坚壮些<br>你介意来爱护<br>又靠谁施舍</p></blockquote><p>难离难舍想抱紧些<br>茫茫人生好像荒野<br>如孩儿能伏于爸爸的肩膊<br>谁要下车<br>难离难舍总有一些<br>常情如此不可推卸<br>任世间怨我坏可知我只得你<br>承受我的狂或野</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不要不要假设我知道&lt;br&gt;一切一切也都是为我而做&lt;br&gt;为何这么伟大&lt;br&gt;如此感觉不到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不说一句的爱有多好&lt;br&gt;只有一次记得实在接触到&lt;br&gt;骑着单车的我俩&lt;br&gt;怀紧贴背的拥抱&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不会表达
      
    
    </summary>
    
    
      <category term="音乐" scheme="https://asswei7.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
  </entry>
  
  <entry>
    <title>苦瓜</title>
    <link href="https://asswei7.github.io/2021/01/11/%E8%8B%A6%E7%93%9C/%E8%8B%A6%E7%93%9C/"/>
    <id>https://asswei7.github.io/2021/01/11/%E8%8B%A6%E7%93%9C/%E8%8B%A6%E7%93%9C/</id>
    <published>2021-01-11T12:30:05.000Z</published>
    <updated>2021-01-11T12:30:05.981Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>富士山下</title>
    <link href="https://asswei7.github.io/2021/01/11/%E5%AF%8C%E5%A3%AB%E5%B1%B1%E4%B8%8B/%E5%AF%8C%E5%A3%AB%E5%B1%B1%E4%B8%8B/"/>
    <id>https://asswei7.github.io/2021/01/11/%E5%AF%8C%E5%A3%AB%E5%B1%B1%E4%B8%8B/%E5%AF%8C%E5%A3%AB%E5%B1%B1%E4%B8%8B/</id>
    <published>2021-01-11T12:27:23.000Z</published>
    <updated>2021-01-11T13:01:39.667Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拦路雨偏似雪花，饮泣的你冻吗</p></blockquote><p>回想起当初在富士山下的情景，偷偷哭</p><blockquote><p>这风褛我给你磨到有襟花，连调了职也不怕</p></blockquote><p>白色的襟花在葬礼时才用，冰封三尺非一日之寒</p><blockquote><p>怎么始终牵挂，苦心选中今天想车你回家</p><p>原谅我不再送花，伤口应要结疤</p></blockquote><p>不送花是为了不揭开伤口</p><blockquote><p>花瓣铺满心里坟场才害怕，如若你非我不嫁</p><p>彼此终必火化，一生一世等一天需要代价</p><p>谁都只得那双手，靠拥抱亦难任你拥有</p></blockquote><p>要拥有必先懂失去怎接受，曾沿着雪路浪游</p><p>为何为好事泪流，谁能凭爱意要富士山私有</p><p>何不把悲哀感觉，假设是来自你虚构</p><p>试管里找不到它染污眼眸，前尘硬化像石头</p><p>随缘地抛下便逃走，我绝不罕有</p><p>往街里绕过一周，我便化乌有</p><blockquote><p>情人节不要说穿，只敢抚你发端</p></blockquote><p>不敢抱着她了，只敢摸一下头发</p><blockquote><p>这种姿态可会令你更心酸，留在汽车里取暖</p><p>应该怎么规劝，怎么可以将手腕忍痛划损</p><p>人活到几岁算短，失恋只有更短</p><p>归家需要几里路谁能预算，忘掉我跟你恩怨</p></blockquote><p>归家是死亡的意思</p><blockquote><p>樱花开了几转，东京之旅一早比一世遥远</p><p>谁都只得那双手，靠拥抱亦难任你拥有</p><p>要拥有必先懂失去怎接受，曾沿着雪路浪游</p><p>为何为好事泪流，谁能凭爱意要富士山私有</p><p>何不把悲哀感觉，假设是来自你虚构</p><p>试管里找不到它染污眼眸，前尘硬化像石头</p><p>随缘地抛下便逃走，我绝不罕有</p></blockquote><p>往街里绕过一周，我便化乌有</p><p>谁都只得那双手，靠拥抱亦难任你拥有</p><p>要拥有必先懂失去怎接受，曾沿着雪路浪游</p><p>为何为好事泪流，谁能凭爱意要富士山私有</p><blockquote><p>何不把悲哀感觉，假设是来自你虚构</p><p>试管里找不到它染污眼眸，前尘硬化像石头</p><p>随缘地抛下便逃走，我绝不罕有</p><p>往街里绕过一周，我便化乌有</p><p>你还嫌不够，我把这陈年风褛</p></blockquote><p>送赠你解咒</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;拦路雨偏似雪花，饮泣的你冻吗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回想起当初在富士山下的情景，偷偷哭&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这风褛我给你磨到有襟花，连调了职也不怕&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;白色的襟花在葬礼时
      
    
    </summary>
    
    
      <category term="音乐" scheme="https://asswei7.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
  </entry>
  
  <entry>
    <title>计网网络层</title>
    <link href="https://asswei7.github.io/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>https://asswei7.github.io/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/</id>
    <published>2021-01-09T14:02:40.000Z</published>
    <updated>2021-09-16T01:16:27.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>网络层的传输单位是数据报。</p><ol><li>路由选择和分组转发</li><li>异构网络互联（不同的设备都可以正常连接）</li><li>拥塞控制</li></ol><p>数据报和分组的关系：数据报是一段比较长的数据，将它进行切割成一段段之后就得到分组<br><br>功能一就是让数据在路由器之间走最佳的路径<br><br>开环控制就是在拥塞之前就提前设计解决<br><br>闭环控制就是在拥塞时自动调整解决问题</p><div class="table-container"><table><thead><tr><th style="text-align:center">层次</th><th style="text-align:center">传输单元</th></tr></thead><tbody><tr><td style="text-align:center">应用层</td><td style="text-align:center">报文</td></tr><tr><td style="text-align:center">传输层</td><td style="text-align:center">报文段</td></tr><tr><td style="text-align:center">网络层</td><td style="text-align:center">IP数据报/分组</td></tr><tr><td style="text-align:center">数据链路层</td><td style="text-align:center">帧</td></tr><tr><td style="text-align:center">物理层</td><td style="text-align:center">比特流</td></tr></tbody></table></div><h2 id="2-数据交换方式"><a href="#2-数据交换方式" class="headerlink" title="2. 数据交换方式"></a>2. 数据交换方式</h2><p>为什么要进行数据交换？因为每个节点之间都拉网线太麻烦了也不实际，所以通过大量交换设备互联进行数据交换</p><h3 id="2-1-电路交换"><a href="#2-1-电路交换" class="headerlink" title="2.1 电路交换"></a>2.1 电路交换</h3><p>类似于打电话</p><h3 id="2-2-报文交换"><a href="#2-2-报文交换" class="headerlink" title="2.2 报文交换"></a>2.2 报文交换</h3><ol><li>源先根据报文加上ip地址，物理地址等，通过物理层发送</li><li>交换机收到报文之后，先进行存储，等待链路空闲之后进行转发，但是转发的路径不是固定的，是比较随机的</li><li>最后通过许多交换机最终到达目的地</li></ol><h3 id="2-3-分组交换"><a href="#2-3-分组交换" class="headerlink" title="2.3 分组交换"></a>2.3 分组交换</h3><p>分组交换和报文交换基本相同，就是将报文切割之后再进行发送</p><p>缺点：</p><ol><li>有存储转发时延</li><li>需要传输额外的信息量</li><li>乱序到达目的主机时，要对其重新排序<h3 id="2-4-分组交换和报文交换计算量对比"><a href="#2-4-分组交换和报文交换计算量对比" class="headerlink" title="2.4 分组交换和报文交换计算量对比"></a>2.4 分组交换和报文交换计算量对比</h3>报文交换：一共三段，每段都需要10000bit/1000bps=10s，三段就是3x10=30s</li></ol><p>分组交换：可以分为两段，一个是第一个数据开始发到最后一个数据从源发出，一段是最后一个数据到达目的地。第一段总时间是10000bit/1000bps=10s，第二段总时间是（10/1000）*2=0.02s，所以总时间是10.02s。</p><p>理解一下，这里就是报文交换的时候，由于报文没有分割，所以即使先到的数据也不能先发走，只能等到最后一段报文全部到了之后才能一起走，相对于分组交换明显拖慢了前面数据的速度，所以导致报文交换明显慢于分组交换<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/计算.png" alt></p><h4 id="2-4-1-分组传输的两种方式-数据报和虚电路"><a href="#2-4-1-分组传输的两种方式-数据报和虚电路" class="headerlink" title="2.4.1 分组传输的两种方式-数据报和虚电路"></a>2.4.1 分组传输的两种方式-数据报和虚电路</h4><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/概述.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/表格.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/数据报.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/虚电路.png" alt="avatar"></p><h2 id="3-路由算法和路由协议"><a href="#3-路由算法和路由协议" class="headerlink" title="3. 路由算法和路由协议"></a>3. 路由算法和路由协议</h2><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/路由算法.png" alt="avatar"><br>AS就是多个路由器之间构成的单独的小圈子，圈子内使用自己的协议，圈子和圈子之间用的是BGP协议<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/层次路由.png" alt="avatar"></p><h3 id="3-1-RIP协议和距离向量算法"><a href="#3-1-RIP协议和距离向量算法" class="headerlink" title="3.1 RIP协议和距离向量算法"></a>3.1 RIP协议和距离向量算法</h3><h4 id="3-1-1-RIP协议概述"><a href="#3-1-1-RIP协议概述" class="headerlink" title="3.1.1 RIP协议概述"></a>3.1.1 RIP协议概述</h4><p>最大优点是简单，只适用于小型互联网。<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/RIP概述.png" alt="avatar"></p><h4 id="3-1-2-如何建立路由表"><a href="#3-1-2-如何建立路由表" class="headerlink" title="3.1.2 如何建立路由表"></a>3.1.2 如何建立路由表</h4><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/RIP路由表.png" alt="avatar"></p><font color="red">应用层协议，时延UDP传输数据。</font><p>好消息传得快，坏消息传得慢。</p><h4 id="3-1-3-距离向量算法"><a href="#3-1-3-距离向量算法" class="headerlink" title="3.1.3 距离向量算法"></a>3.1.3 距离向量算法</h4><p>为什么改地址？因为图中是从x得到的信息<br><br>为什么距离固定+1？因为路由器只从相邻路由器之间获取RIP报文，举例只会是1<br><br>为什么下一跳是x就要替换？因为网络环境不断变化，可能这次某个节点挂掉，所以保持最新的<br><br>为什么下一跳不是x时有更新和不处理两种手段？因为这样可以提高效率，比原来快就换，比原来慢就保留原来的，也可以理解</p><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/距离向量.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/练习.png" alt="avatar"></p><h3 id="3-2-OSPF协议和链路状态算法"><a href="#3-2-OSPF协议和链路状态算法" class="headerlink" title="3.2 OSPF协议和链路状态算法"></a>3.2 OSPF协议和链路状态算法</h3><h4 id="3-2-1-OSPF概述"><a href="#3-2-1-OSPF概述" class="headerlink" title="3.2.1 OSPF概述"></a>3.2.1 OSPF概述</h4><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/OSPF概述.png" alt="avatar"><br>适用于互联网规模大时使用。不存在坏消息慢，收敛速度很快。</p><p>为什么OSPF收敛速度快？因为它只是刷新一下链路状态，得知其是否连通，不需要和RIP一样进行对照，而是直接通过Dijilstra算法来自己算出路径</p><h3 id="3-3-BGP协议"><a href="#3-3-BGP协议" class="headerlink" title="3.3 BGP协议"></a>3.3 BGP协议</h3><h4 id="3-3-1-BGP协议概述"><a href="#3-3-1-BGP协议概述" class="headerlink" title="3.3.1 BGP协议概述"></a>3.3.1 BGP协议概述</h4><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/BGP简介.png" alt="avatar"></p><h4 id="3-3-2-BGP交换信息过程"><a href="#3-3-2-BGP交换信息过程" class="headerlink" title="3.3.2 BGP交换信息过程"></a>3.3.2 BGP交换信息过程</h4><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/BGP交换信息.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/BGP交换信息2.png" alt="avatar"></p><h4 id="3-3-3-BGP报文格式"><a href="#3-3-3-BGP报文格式" class="headerlink" title="3.3.3 BGP报文格式"></a>3.3.3 BGP报文格式</h4><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/报文格式.png" alt="avatar"></p><h4 id="3-3-4-BGP协议特点"><a href="#3-3-4-BGP协议特点" class="headerlink" title="3.3.4 BGP协议特点"></a>3.3.4 BGP协议特点</h4><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/协议特点.png" alt="avatar"></p><h4 id="3-3-5-BGP四种报文"><a href="#3-3-5-BGP四种报文" class="headerlink" title="3.3.5 BGP四种报文"></a>3.3.5 BGP四种报文</h4><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/四种报文.png" alt="avatar"></p><h3 id="3-4-四种路由协议的比较"><a href="#3-4-四种路由协议的比较" class="headerlink" title="3.4 四种路由协议的比较"></a>3.4 四种路由协议的比较</h3><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/路由协议比较.png" alt="avatar"><br>RIP：通过广播UDP交换信息</p><p>OSPF：交换的信息量很大，报文长度尽量短，直接使用IP</p><p>BGP：需要在不同AS之间交换信息，网络环境复杂，需要保证可靠传输，所以使用TCP。</p><h2 id="4-IP数据报"><a href="#4-IP数据报" class="headerlink" title="4. IP数据报"></a>4. IP数据报</h2><h3 id="4-1-IP数据报格式"><a href="#4-1-IP数据报格式" class="headerlink" title="4.1 IP数据报格式"></a>4.1 IP数据报格式</h3><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/IP数据报格式.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/IP数据报格式2.png" alt="avatar"><br>计算偏移量时记住是以0开始的就行，以每一篇最开始的除以8得到的数值就是偏移量<br>MF和DF的定义见上图<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/IP数据报分片.png" alt="avatar"></p><h2 id="5-IP地址"><a href="#5-IP地址" class="headerlink" title="5. IP地址"></a>5. IP地址</h2><h4 id="5-1-2-特殊IP地址"><a href="#5-1-2-特殊IP地址" class="headerlink" title="5.1.2 特殊IP地址"></a>5.1.2 特殊IP地址</h4><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/IP地址分类.png" alt="avatar"></p><h4 id="5-1-1-私有IP地址"><a href="#5-1-1-私有IP地址" class="headerlink" title="5.1.1 私有IP地址"></a>5.1.1 私有IP地址</h4><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/私有IP.png" alt="avatar"><br>为什么A类最大是126.xxx.xxx.xxx？<br>因为网络号最开始第一位是0，一共八位，所以二进制表示位0xxxxxxx，最大就是2^7-1=127，但是因为127.xxx.xxx.xxx是特殊ip地址，所以将其去掉</p><p>为什么B类最大是191.255.xxx.xxx？<br>因为网络号最开始第一位是10，一共八位，所以二进制表示位10xxxxxx，最大就是10111111=191，最小就是10000000=128，无特殊ip地址</p><p>为什么C类最大是223.255.xxx.xxx？<br>因为网络号最开始第一位是110，一共八位，所以二进制表示位110xxxxx，最大就是11011111=223，最小就是10000000=192，无特殊ip地址</p><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/IP地址分类.png" alt="avatar"></p><h3 id="5-2-网络地址转换NAT"><a href="#5-2-网络地址转换NAT" class="headerlink" title="5.2 网络地址转换NAT"></a>5.2 网络地址转换NAT</h3><p>连接内网和外网，就是找个代理的用它的ip地址与外面收发数据</p><p>NAT需要构建NAT转换表，既要存广域网（WAN，外网）也要存局域网（LAN，内网）的ip地址和端口<br>号<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/NAT.png" alt="avatar"></p><h3 id="5-3-子网划分和子网掩码"><a href="#5-3-子网划分和子网掩码" class="headerlink" title="5.3 子网划分和子网掩码"></a>5.3 子网划分和子网掩码</h3><h4 id="5-3-1-为什么需要子网划分？"><a href="#5-3-1-为什么需要子网划分？" class="headerlink" title="5.3.1 为什么需要子网划分？"></a>5.3.1 为什么需要子网划分？</h4><p>总结一下，就是ip不够用，所以需要额外整个子网扩展ip</p><p>为什么子网好能全0或者全1：因为CIDR编址（可见下一段）<br><br>为什么主机号不能全0或者全1：因为全0代表本网络，全1代表广播分组</p><h4 id="5-3-2-子网掩码"><a href="#5-3-2-子网掩码" class="headerlink" title="5.3.2 子网掩码"></a>5.3.2 子网掩码</h4><p>这道题可以看出来，即使子网掩码不同，相同ip地址对应的子网ip地址也可能相同<br><br>但是子网掩码不同，划分的子网数目不同<br><br>为什么划分的子网数目不同？或者说怎么算划分的子网位数目？<br><br>以255.255.192.0为例，255是11111111即八个1,192是11000000即2个1，一共是82+2=18个1，一共有32位地址，所以剩余有32-18=14位<br><br>以255.255.224.0为例，255是11111111即八个1,224是11100000即3个1，一共是82+3=19个1，一共有32位地址，所以剩余有32-19=13位<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/练习1.png" alt="avatar"><br>这道题先将255.255.252.0计算出一共有8+8+6=22位网络号位<br><br>所以就有32-22=10位主机号位<br><br>将180.80.77.55解析，可以知道在77部分某部分开始会用来表示主机号位<br><br>77的二进制是0100 1101，因为一共有22位网络号位，所以010011 （此处分开） 01，从这个01开始是主机号位。<br><br>所以用来表示子网ip地址的应该是180.80.76（010011 00）.xxx PS注意76括号内后两位二进制00<br><br>但是本体是发布广播地址，所以主机号全部都要是1<br><br>所以应该是180.80.79（010011 11）.255（11111111）注意79括号内后两位二进制11<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/练习2.png" alt="avatar"></p><ol><li>这里特定主机路由就是指找特定的处理这里这个ip地址的路由</li><li>默认路由会将这个数据报发给另一个路由，直至找到对应的路由，或者TTL耗尽被丢弃<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/转发2.png" alt="avatar"></li></ol><h3 id="5-4-无分类编址CIDR"><a href="#5-4-无分类编址CIDR" class="headerlink" title="5.4 无分类编址CIDR"></a>5.4 无分类编址CIDR</h3><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/CIDR1.png" alt="avatar"><br>使用CIDR可以聚合网络.<br>如图，通过缩短前缀，R1和R2就可以合并在206.1.0.0/16的子网下.<br>但是这样转发表之中就会有多个匹配结果，所以我们使用最长前缀匹配<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/CIDR2.png" alt="avatar"><br>最长前缀匹配就是在计算后符合同一子网的时候，选前缀越长的<br>这道题选B</p><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/CIDR3.png" alt="avatar"><br>因为本网络是192.168.5.0/24，就是192.168.5.（0000 0000）/24，将248写成二进制是11111 000，有五个1，所以前五位都可以作为子网的编号，剩下的三位就是用来分配子网内剩余的地址了，因为不能全0或者全1，所以还要减2<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/CIDR4.png" alt="avatar"></p><h3 id="5-5-ARP协议"><a href="#5-5-ARP协议" class="headerlink" title="5.5 ARP协议"></a>5.5 ARP协议</h3><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/ARP1.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/ARP2.png" alt="avatar"></p><h3 id="5-6-DHCP协议"><a href="#5-6-DHCP协议" class="headerlink" title="5.6 DHCP协议"></a>5.6 DHCP协议</h3><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/DHCP.png" alt="avatar"></p><h3 id="5-7-ICMP协议"><a href="#5-7-ICMP协议" class="headerlink" title="5.7 ICMP协议"></a>5.7 ICMP协议</h3><p>ICMP，IGMP处于网络层和传输层之间，就是为了更好地转发ip数据报和提高交互成功的几率</p><h4 id="5-7-1-ICMP差错报文"><a href="#5-7-1-ICMP差错报文" class="headerlink" title="5.7.1 ICMP差错报文"></a>5.7.1 ICMP差错报文</h4><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/差错报文.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/不错.png" alt="avatar"></p><h4 id="5-7-2-ICMP询问报文"><a href="#5-7-2-ICMP询问报文" class="headerlink" title="5.7.2 ICMP询问报文"></a>5.7.2 ICMP询问报文</h4><p>后两种是掩码地址请求和回答报文，路由器询问和通告报文，这两个已经废弃不再使用<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/询问报文.png" alt="avatar"></p><h4 id="5-7-3-ICMP应用"><a href="#5-7-3-ICMP应用" class="headerlink" title="5.7.3 ICMP应用"></a>5.7.3 ICMP应用</h4><p>1.ping命令：测试两个主机之间连通性，使用了ICMP回送请求和回答报文</p><p>2.traceroute命令：跟踪一个分组从原点到终点的路径，使用了ICMP时间超过差错报告报文</p><h2 id="6-IPv6"><a href="#6-IPv6" class="headerlink" title="6. IPv6"></a>6. IPv6</h2><p>就是IPV4地址用完了，从根本上增加ip地址数目，之前讲的NAT和CIDR也只是在IPV4的基础上扩展了IPV4地址数目，治标不治本<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/IPv6地址.png" alt="avatar"></p><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/数据报格式.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/46差别.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/46过渡.png" alt="avatar"><br>如果是ipv6的数据报到了ipv4，就用ipv4重新封装，把ipv6数据报前面加上ipv4伪装成ipv4数据报继续传输，直至到了ipv6路由再解开ipv4伪装</p><h2 id="7-IP组播"><a href="#7-IP组播" class="headerlink" title="7. IP组播"></a>7. IP组播</h2><p>单播只能一对一，广播必须一对全部，组播就可以是一对全部中的一部分</p><h2 id="8-移动IP"><a href="#8-移动IP" class="headerlink" title="8. 移动IP"></a>8. 移动IP</h2><p>移动IP不等于动态IP（DHCP获得的）</p><p>移动IP的可以让用户因为地理原因等等，即使不在内网也可以访问内网的东西</p><h3 id="8-1-移动IP的相关术语"><a href="#8-1-移动IP的相关术语" class="headerlink" title="8.1 移动IP的相关术语"></a>8.1 移动IP的相关术语</h3><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/移动IP术语.png" alt="avatar"></p><h3 id="8-2-移动IP的通信过程"><a href="#8-2-移动IP的通信过程" class="headerlink" title="8.2 移动IP的通信过程"></a>8.2 移动IP的通信过程</h3><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/通信过程1.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/通信过程2.png" alt="avatar"></p><h2 id="9-网络层设备-路由器"><a href="#9-网络层设备-路由器" class="headerlink" title="9. 网络层设备-路由器"></a>9. 网络层设备-路由器</h2><h3 id="9-1-路由器构造"><a href="#9-1-路由器构造" class="headerlink" title="9.1 路由器构造"></a>9.1 路由器构造</h3><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/构造.png" alt="avatar"></p><h3 id="9-2-输入和输出端口构造"><a href="#9-2-输入和输出端口构造" class="headerlink" title="9.2 输入和输出端口构造"></a>9.2 输入和输出端口构造</h3><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/输入端口.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/输出端口.png" alt="avatar"></p><h3 id="9-3-三种设备比较"><a href="#9-3-三种设备比较" class="headerlink" title="9.3 三种设备比较"></a>9.3 三种设备比较</h3><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/比较.png" alt="avatar"></p><h3 id="9-4-路由表和转发表"><a href="#9-4-路由表和转发表" class="headerlink" title="9.4 路由表和转发表"></a>9.4 路由表和转发表</h3><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82/转发.png" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h2&gt;&lt;p&gt;网络层的传输单位是数据报。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;路由选择和分组转发&lt;/li&gt;
&lt;li&gt;异构网络互联（不同的设备都可
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://asswei7.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>计网数据链路层</title>
    <link href="https://asswei7.github.io/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>https://asswei7.github.io/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</id>
    <published>2021-01-09T13:59:51.000Z</published>
    <updated>2021-01-11T07:04:26.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/基本.png" alt="avatar"></p><h2 id="2-封装成帧和透明传输"><a href="#2-封装成帧和透明传输" class="headerlink" title="2. 封装成帧和透明传输"></a>2. 封装成帧和透明传输</h2><p>封装成帧就是加将数据加头加尾，相当于将数据打包</p><p>透明传输就是为了防止特殊的数据无法正常传输的的情况的发生，比如说在封装成帧的过程中出现数据中的某些标记符与开始/结束标记符恰巧重复等等情况</p><h3 id="2-1-透明传输"><a href="#2-1-透明传输" class="headerlink" title="2.1 透明传输"></a>2.1 透明传输</h3><p>帧同步：接收方能从接收到的二进制比特流中区分出帧的起始和终止</p><ol><li>字符计数法</li><li>字符填充法</li><li>零比特填充法</li><li>违规编码法</li></ol><h2 id="3-差错控制"><a href="#3-差错控制" class="headerlink" title="3. 差错控制"></a>3. 差错控制</h2><p>数据链路层的差错检测的是比特的错误</p><h3 id="3-1-为什么在数据链路层差错控制？"><a href="#3-1-为什么在数据链路层差错控制？" class="headerlink" title="3.1 为什么在数据链路层差错控制？"></a>3.1 为什么在数据链路层差错控制？</h3><p>因为错误可以尽早发现，不会让一个错误的数据包发送了很长时间到达最终目的地之后才被发现，从而导致网络资源的浪费</p><h3 id="3-2-检错编码"><a href="#3-2-检错编码" class="headerlink" title="3.2 检错编码"></a>3.2 检错编码</h3><h4 id="3-2-1-奇偶校验码"><a href="#3-2-1-奇偶校验码" class="headerlink" title="3.2.1 奇偶校验码"></a>3.2.1 奇偶校验码</h4><h4 id="3-2-2-CRC循环冗余码"><a href="#3-2-2-CRC循环冗余码" class="headerlink" title="3.2.2 CRC循环冗余码"></a>3.2.2 CRC循环冗余码</h4><p>就是用传输数据除以生成多项式得到冗余码<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/CRC1.png" alt="avatar"><br>实际例子<br>注释：</p><ol><li>阶数就是最高位是哪位，然后位数-1，如10011就是5-1=4,1011就是4-1=3</li><li>异或运算就是相同得0，不同得1，比如100和101做异或，结果就是001</li><li>除数和最后的余数添加到要发送的数据后面，称为帧检验序列FCS</li></ol><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/CRC2.png" alt="avatar"><br>接收方收到数据后进行检测</p><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/CRC3.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/CRC4.png" alt="avatar"></p><h2 id="4-数据链路层的流量控制和可靠传输"><a href="#4-数据链路层的流量控制和可靠传输" class="headerlink" title="4. 数据链路层的流量控制和可靠传输"></a>4. 数据链路层的流量控制和可靠传输</h2><h3 id="4-1-流量控制与可靠传输"><a href="#4-1-流量控制与可靠传输" class="headerlink" title="4.1 流量控制与可靠传输"></a>4.1 流量控制与可靠传输</h3><p>流量控制是为了让传输过程中的发送速度和接受速度匹配，减少传输出错与资源浪费<br><br>可靠传输是发送端发送什么，接收端就要受到什么</p><div class="table-container"><table><thead><tr><th style="text-align:center">协议名称</th><th style="text-align:center">发送窗口</th><th style="text-align:center">接收窗口</th><th style="text-align:center">特点</th><th style="text-align:center">窗口大小限制</th></tr></thead><tbody><tr><td style="text-align:center">停等协议</td><td style="text-align:center">=1</td><td style="text-align:center">=1</td><td style="text-align:center">数据帧和确认帧必须编号</td><td style="text-align:center">恒为1,n个比特数对帧编号</td></tr><tr><td style="text-align:center">后退N帧协议</td><td style="text-align:center">&gt;1</td><td style="text-align:center">=1</td><td style="text-align:center">不是想要的帧就丢弃</td><td style="text-align:center">1&lt;=Ws&lt;=2^n - 1</td></tr><tr><td style="text-align:center">选择重传协议</td><td style="text-align:center">&gt;1</td><td style="text-align:center">&gt;1</td><td style="text-align:center">来者不拒</td><td style="text-align:center">Ws=Wr = 2^(n-1)</td></tr></tbody></table></div><h3 id="4-2-停等协议"><a href="#4-2-停等协议" class="headerlink" title="4.2 停等协议"></a>4.2 停等协议</h3><p>停止等待协议的特点</p><ol><li>简单</li><li>信道利用率低。大部分时间数据都在路上，发送方很长时间闲置，资源浪费</li></ol><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/利用率计算.png" alt="avatar"></p><h3 id="4-3-后退N帧协议"><a href="#4-3-后退N帧协议" class="headerlink" title="4.3 后退N帧协议"></a>4.3 后退N帧协议</h3><p>因为停止等待协议太浪费时间了，所以尝试采用GBN，发送连续多个数据帧，以增大信道利用率</p><p>累计确认：就是收到一个确认帧，那么它和它之前的所有帧都默认已收到，反之，如果某个确认帧没收到，那么它和它之后的所有帧都默认丢失（即使收到了也丢掉），进行重传</p><p>GBN的优缺点也显而易见，优点是提高了信道利用率，缺点是因为重传机制的原因导致已经收到数据却需要强行丢弃而造成浪费.</p><h3 id="4-4-选择重传协议协议"><a href="#4-4-选择重传协议协议" class="headerlink" title="4.4 选择重传协议协议"></a>4.4 选择重传协议协议</h3><p>为了解决GBN的缺点，我们打算尝试只重传错误的帧，这样的话就不用浪费资源吧已经收到的帧再重传一次了。</p><p>和GBN相比，两者都有窗口了，和GBN的区别其实就是做了一个数据缓存，已经收到的帧不用扔了，等待之前因意外丢失的帧收到的时候确认即可，但是只能缓存窗口尺寸内的包含的帧（PS，缓存咋可能无限大）</p><h2 id="5-介质访问控制技术"><a href="#5-介质访问控制技术" class="headerlink" title="5. 介质访问控制技术"></a>5. 介质访问控制技术</h2><p>就是让节点之间的通信不会进行相互干扰<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/介质访问控制.png" alt="avatar"></p><h3 id="5-1-信道划分介质访问控制"><a href="#5-1-信道划分介质访问控制" class="headerlink" title="5.1 信道划分介质访问控制"></a>5.1 信道划分介质访问控制</h3><p>虽然使用一条共享信道，但是通过多路复用技术组合进行传输，提高了信道的利用率</p><ol><li>频分多路复用</li><li>时分多路复用</li><li>统计时分多路复用：STDM的原则是先到先走，满了就发，相对于TDM提高了利用率</li><li>码分多路复用</li></ol><h3 id="5-2-随机访问控制"><a href="#5-2-随机访问控制" class="headerlink" title="5.2 随机访问控制"></a>5.2 随机访问控制</h3><p>所有用户都可以随机发送信息，发送时可以占用全部带宽，理论上个人使用时比静态分配信道的速度更快。</p><h4 id="5-2-1-ALOHA协议"><a href="#5-2-1-ALOHA协议" class="headerlink" title="5.2.1 ALOHA协议"></a>5.2.1 ALOHA协议</h4><p>不听就发。<br><strong>冲突如何检测？</strong><br><br>如果发生冲突，接收方会检测出差错，然后不予确认，发送方在一段时间内收不到确认就判断发送冲突。<br><strong>冲突如何解决？</strong><br><br>超时后等一个随机时间再重传</p><p>相对于纯ALOHA协议就是固定了发送的时间（只能在一个时间片的开始），提高了效率</p><h4 id="5-2-2-CSMA协议"><a href="#5-2-2-CSMA协议" class="headerlink" title="5.2.2 CSMA协议"></a>5.2.2 CSMA协议</h4><p>先听再发，在发送帧之前，先监听信道。</p><div class="table-container"><table><thead><tr><th style="text-align:center">状态</th><th style="text-align:center">1-坚持</th><th style="text-align:center">非坚持</th><th style="text-align:center">p-坚持</th></tr></thead><tbody><tr><td style="text-align:center">信道空闲</td><td style="text-align:center">马上发</td><td style="text-align:center">马上发</td><td style="text-align:center">以概率p发</td></tr><tr><td style="text-align:center">信道忙</td><td style="text-align:center">坚持监听，等空闲就发</td><td style="text-align:center">放弃监听，随机等一段时间后再监听</td><td style="text-align:center">放弃监听，随机等一段时间后再监听</td></tr></tbody></table></div><h4 id="5-2-3-CSMA-CD协议"><a href="#5-2-3-CSMA-CD协议" class="headerlink" title="5.2.3 CSMA/CD协议"></a>5.2.3 CSMA/CD协议</h4><p>就是因为链路实际有长短，发送数据需要时间，这个时间内可能就被其他节点当成空闲状态导致发生碰撞<br><br>知道自己发生碰撞的最长时间是2τ（两倍的传播时延），就是一去一回<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/CD1.png" alt="avatar"><br>图示传播时延对载波监听的影响<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/CD2.png" alt="avatar"><br>由此我们可以想到最小帧长的问题，因为如果帧太短，帧都发送完了才检测到碰撞导致停止，导致无法停止碰撞</p><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/CD3.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/CD4.png" alt="avatar"></p><h4 id="5-2-4-CSMA-CA协议"><a href="#5-2-4-CSMA-CA协议" class="headerlink" title="5.2.4 CSMA/CA协议"></a>5.2.4 CSMA/CA协议</h4><p>无线局域网中无法做到360°的全面碰撞检测。<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/CA1.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/CA2.png" alt="avatar"></p><h3 id="5-3-轮询访问介质访问控制"><a href="#5-3-轮询访问介质访问控制" class="headerlink" title="5.3 轮询访问介质访问控制"></a>5.3 轮询访问介质访问控制</h3><p>主要包括两大类，一个是轮询协议，另一个是令牌传递协议。</p><h2 id="6-局域网"><a href="#6-局域网" class="headerlink" title="6. 局域网"></a>6. 局域网</h2><h3 id="6-1-局域网概念"><a href="#6-1-局域网概念" class="headerlink" title="6.1 局域网概念"></a>6.1 局域网概念</h3><p>概括：范围小，速度快，延迟低，节点平等<br>使用广播信道。</p><p>决定局域网的主要要素为：网络拓扑、传输介质、介质访问控制方法。</p><h4 id="6-1-1-局域网的网络拓扑结构"><a href="#6-1-1-局域网的网络拓扑结构" class="headerlink" title="6.1.1 局域网的网络拓扑结构"></a>6.1.1 局域网的网络拓扑结构</h4><p>最常用的是总线型拓扑<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/拓扑结构.png" alt="avatar"></p><h4 id="6-1-2-局域网的传播介质"><a href="#6-1-2-局域网的传播介质" class="headerlink" title="6.1.2 局域网的传播介质"></a>6.1.2 局域网的传播介质</h4><p>有线局域网：双绞线、同轴电缆、光纤<br><br>无线局域网：电磁波</p><h4 id="6-1-3-局域网的介质访问控制方法"><a href="#6-1-3-局域网的介质访问控制方法" class="headerlink" title="6.1.3 局域网的介质访问控制方法"></a>6.1.3 局域网的介质访问控制方法</h4><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/介质访问.png" alt="avatar"></p><h3 id="6-2-局域网的分类"><a href="#6-2-局域网的分类" class="headerlink" title="6.2 局域网的分类"></a>6.2 局域网的分类</h3><ol><li>以太网，IEEE 802.3系列标准。逻辑拓扑总线型，物理拓扑是星型。使用CSMA/CD</li><li>令牌环网</li><li>FDDI网</li><li>ATM网</li><li>无线局域网，采用IEEE 802.11标准</li></ol><h3 id="6-3-IEEE802标准"><a href="#6-3-IEEE802标准" class="headerlink" title="6.3 IEEE802标准"></a>6.3 IEEE802标准</h3><p>802.3：以太网介质访问控制协议(CSMA/CD)及物理层技术规范。<br><br>802.5：令牌环网<br><br>802.8：光纤有关<br><br>802.11：无线局域网(WLAN)的介质访问控制协议及物理层技术规范</p><h4 id="6-3-1-IEEE802描述的局域网参考模型"><a href="#6-3-1-IEEE802描述的局域网参考模型" class="headerlink" title="6.3.1 IEEE802描述的局域网参考模型"></a>6.3.1 IEEE802描述的局域网参考模型</h4><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/LLC.png" alt="avatar"></p><h3 id="6-4-以太网"><a href="#6-4-以太网" class="headerlink" title="6.4 以太网"></a>6.4 以太网</h3><p>是应用最广泛的一种局域网技术。使用CSMA/CD技术。</p><h4 id="6-4-1-以太网概念"><a href="#6-4-1-以太网概念" class="headerlink" title="6.4.1 以太网概念"></a>6.4.1 以太网概念</h4><p>以太网提供无连接、不可靠的服务。<br><br>无连接：无握手过程<br><br>不可靠：不对数据帧编号，接收方不向发送方进行确认，差错帧直接丢弃。</p><p>以太网只实现无差错接收，不实现可靠传输。</p><h4 id="6-4-2-以太网MAC帧"><a href="#6-4-2-以太网MAC帧" class="headerlink" title="6.4.2 以太网MAC帧"></a>6.4.2 以太网MAC帧</h4><ol><li>这里的mac层指的是数据链路层</li><li>之前说过数据链路层将上一层ip数据包加头加尾<br><br>头就是目标地址（6字节），源地址（6字节），类型（2字节）<br><br>尾就是FCS（帧检验序列），（4字节）</li><li>前导码不是MAC帧的一部分，目的是使时钟同步</li><li><p>为什么数据长度时46~1500？<br><br>因为有最小传输字节64字节，mac占用6+6+2+4=18，所以数据最小为64-18=46，1500则是规定的默认最大字节，没有理由<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/MAC帧.png" alt="avatar"></p><h4 id="6-4-3-10BASE-T以太网"><a href="#6-4-3-10BASE-T以太网" class="headerlink" title="6.4.3 10BASE-T以太网"></a>6.4.3 10BASE-T以太网</h4><p>是传送基带信号的双绞线以太网。T表示使用双绞线，传输速率是10Mb/s。</p></li><li><p>物理上采用星型，逻辑上采用总线型，每段双绞线最长为100米。（罗总五星）</p></li><li>采用曼彻斯特编码</li><li>采用CSMA/CD介质访问控制。</li></ol><p>100BASE-T以太网，在双绞线上传送100Mb/s基带信号的星型拓扑以太网。</p><h3 id="6-5-无线局域网"><a href="#6-5-无线局域网" class="headerlink" title="6.5 无线局域网"></a>6.5 无线局域网</h3><p>802.11</p><h2 id="7-广域网"><a href="#7-广域网" class="headerlink" title="7. 广域网"></a>7. 广域网</h2><h3 id="7-1-PPP协议"><a href="#7-1-PPP协议" class="headerlink" title="7.1 PPP协议"></a>7.1 PPP协议</h3><p>PPP协议是目前使用最广泛的数据链路层协议，拨号基本都是PPP协议<br><br>PPP协议仅支持全双工链路<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/PPP1.png" alt="avatar"><br>PPP不需要进行：</p><ol><li>纠错</li><li>流量控制</li><li>序号</li><li>不支持多点线路<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/PPP2.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/PPP3.png" alt="avatar"><h3 id="7-2-HDLC协议"><a href="#7-2-HDLC协议" class="headerlink" title="7.2 HDLC协议"></a>7.2 HDLC协议</h3><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/HDLC1.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/HDLC2.png" alt="avatar"><br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/HDLC3.png" alt="avatar"><h3 id="7-3-PPP和HDLC协议对比"><a href="#7-3-PPP和HDLC协议对比" class="headerlink" title="7.3 PPP和HDLC协议对比"></a>7.3 PPP和HDLC协议对比</h3>为什么HDLC协议更可靠，但是我们使用PPP协议？</li></ol><p>因为现在网络要求高，数据链路层本来就是不可靠的尽力传输，差错控制这些复杂的交给了TCP等<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/对比.png" alt="avatar"></p><h2 id="8-链路层设备"><a href="#8-链路层设备" class="headerlink" title="8. 链路层设备"></a>8. 链路层设备</h2><p>物理层的集线器会无脑将一个设备的所有消息转发到集线器所连的所有设备，故会将所连接的所有设备变成一个大的冲突域，同时只能有两台设备进行通信，且设备越多，冲突越多。由此诞生了网桥</p><h3 id="8-1-网桥"><a href="#8-1-网桥" class="headerlink" title="8.1 网桥"></a>8.1 网桥</h3><p>使用网桥时，由于网桥会根据mac地址进行过滤，所以不会形成冲突域<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/网桥.png" alt="avatar"><br>透明网桥：通过自学习来构建转发表。每一个通过网桥的数据包都会被记录下网桥收到数据时数据对应的地址和网桥自己的接口，通过许许多多的数据包的构造的缓存，网桥就可以知道哪个数据包在哪个接口，以后如果要穿数据包就知道要往哪个接口发送数据包了</p><p>原路由网桥：在发送时，直接将最佳路径放到帧首部。那么网桥如何获得最佳路径？通过广播方式想目标地址发送广播，此时可能会经过不同路由产生不同的路径，目标地址收到后再将每一条路径都发一个响应帧给网桥，网桥经过对比就知道哪个接口最快了</p><h3 id="8-2-交换机"><a href="#8-2-交换机" class="headerlink" title="8.2 交换机"></a>8.2 交换机</h3><p>网桥接口越来越多，网桥就变成了交换机。</p><p>交换机也被成为多端口的网桥。</p><h3 id="8-3-冲突域和广播域"><a href="#8-3-冲突域和广播域" class="headerlink" title="8.3 冲突域和广播域"></a>8.3 冲突域和广播域</h3><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E8%AE%A1%E7%BD%91%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/广播域.png" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-基本概念&quot;&gt;&lt;a href=&quot;#1-基本概念&quot; class=&quot;headerlink&quot; title=&quot;1. 基本概念&quot;&gt;&lt;/a&gt;1. 基本概念&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2021/01/09/%E8%AE%A1%E7%BD%91%E6%95%B0%E6
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://asswei7.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>计网应用层</title>
    <link href="https://asswei7.github.io/2021/01/09/%E8%AE%A1%E7%BD%91%E5%BA%94%E7%94%A8%E5%B1%82/%E8%AE%A1%E7%BD%91%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>https://asswei7.github.io/2021/01/09/%E8%AE%A1%E7%BD%91%E5%BA%94%E7%94%A8%E5%B1%82/%E8%AE%A1%E7%BD%91%E5%BA%94%E7%94%A8%E5%B1%82/</id>
    <published>2021-01-09T13:38:11.000Z</published>
    <updated>2021-01-11T01:53:03.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>应用层的功能：</p><ol><li>文件传输   FTP</li><li>电子邮件   SMTP，POP3</li><li>虚拟终端   HTTP</li><li>查询服务和远程作业登录  DNS</li></ol><h2 id="2-域名系统协议DNS"><a href="#2-域名系统协议DNS" class="headerlink" title="2. 域名系统协议DNS"></a>2. 域名系统协议DNS</h2><p>域名就是www.xxx.com，当然这是最简单的一种<br><br>.com之后还可以有东西，称之为根<br><br>域名从左向右，级别逐渐增高<br></p><h3 id="2-1-域名服务器"><a href="#2-1-域名服务器" class="headerlink" title="2.1 域名服务器"></a>2.1 域名服务器</h3><p>DNS服务器有很多台，根据层次结构分为三层，根域名服务器，顶级域名服务器，权限域名服务器<br>本地域名服务器不算层次结构，特点是里主机比较近，当主机和另一台比较近的主机通信时，就不用走哪些更高级的服务器了</p><p>根域名服务器并不是一个域名只有一台，而是一个域名对应多台域名服务器，全世界一共有13个这样的域名，分别是a.rootservers.net，b.rootservers.net，c.rootservers.net，~m.rootservers.net</p><p>在权限域名服务器中，虽然看似abc.com比y.abc.com少了一位，但是他们的地位仍是对等的，对应的两台权限域名服务器</p><h3 id="2-2-域名解析过程"><a href="#2-2-域名解析过程" class="headerlink" title="2.2 域名解析过程"></a>2.2 域名解析过程</h3><p><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E5%BA%94%E7%94%A8%E5%B1%82/%E8%AE%A1%E7%BD%91%E5%BA%94%E7%94%A8%E5%B1%82/域名解析.png" alt="avatar"></p><h4 id="2-2-1-递归查询"><a href="#2-2-1-递归查询" class="headerlink" title="2.2.1 递归查询"></a>2.2.1 递归查询</h4><p>主机先是想本地域名服务器发送请求，如果查不到的话，<br><br><strong>本地域名服务器</strong>向根域名服务器发送请求（找别人），如果还是查不到的话，<br><br><strong>根域名服务器</strong>向顶级域名服务器发送请求（找别人），如果还是查不到的话，<br><br><br><strong>顶级域名服务器</strong>向权限域名服务器发送请求（找别人）<br><br>可以看到每一次向下一个查询的服务器都变了，不是主机一个个去问，而是服务器自己一个个问下去</p><h4 id="2-2-2-迭代查询"><a href="#2-2-2-迭代查询" class="headerlink" title="2.2.2 迭代查询"></a>2.2.2 迭代查询</h4><p>主机先是想本地域名服务器发送请求，如果查不到的话，<br><br>本地域名服务器就让主机去向根域名服务器发送请求（主机去找，本地域名给目标根域名服务器的IP地址），如果还是查不到的话，<br><br>根域名域名服务器让主机去向对应的顶级域名服务器发送请求（主机去找，根域名给目标顶级域名服务器的IP地址），如果还是查不到的话，<br><br>顶级域名服务器让主机去向权限域名服务器发送请求（主机去找，顶级域名给目标权限域名服务器的IP地址）<br><br>可以看到这里是主机一个个挨个问的地址</p><h4 id="2-2-2-高速缓存"><a href="#2-2-2-高速缓存" class="headerlink" title="2.2.2 高速缓存"></a>2.2.2 高速缓存</h4><p>为了减少多次查询同一个域名的资源浪费，本地域名服务器会存储最近使用的ip地址解析，下次再访问同一个域名就不需要这么多查询步骤了。同时这个高速缓存主机本身也有存储</p><p>同时本地域名服务器还可以对顶级域名服务器，权限域名服务器的地址进行缓存，下一次即使是不知道的ip地址，查询也可以更快</p><p>高速缓存为了保持正确性，需要定时更新</p><h2 id="3-文件传输协议（FTP-TFTP）"><a href="#3-文件传输协议（FTP-TFTP）" class="headerlink" title="3. 文件传输协议（FTP,TFTP）"></a>3. 文件传输协议（FTP,TFTP）</h2><p>TFTP是一个轻量的，比较容易实现的，面对小文件的，<br>UDP的文件传输协议<br>这里我们重点是FTP协议</p><h3 id="3-1-FTP内容"><a href="#3-1-FTP内容" class="headerlink" title="3.1 FTP内容"></a>3.1 FTP内容</h3><p>FTP基于C/S的协议<br><br>基于TCP协议<br><br>为什么有匿名登陆：对于一些公共服务器来说，增加验证阶段就是增加资源开销，减少验证阶段就可以节省资源来更好地服务</p><p>主进程和从属进程的区别：主进程是打开端口，让外部发送的数据可以进来，并且将这些数据逐个分配各从属进程。从属进程则是单独为这些数据服务</p><p>这里客户端和服务器端先建立TCP连接，端口是21，称为<strong>控制连接</strong></p><p><strong>主动建立</strong>连接是指<strong>服务器端</strong>主动发送请求和客户端进行连接，此时端口号固定是20</p><p>被动连接是指客户端发送请求和服务器端建立数据传送连接，此时端口号是不确定，有两者协商得到</p><p>数据传输完成之后，数据连接断开，控制连接继续保持，直至两边发送断开请求<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E5%BA%94%E7%94%A8%E5%B1%82/%E8%AE%A1%E7%BD%91%E5%BA%94%E7%94%A8%E5%B1%82/FTP.png" alt="avatar"></p><h2 id="4-电子邮件"><a href="#4-电子邮件" class="headerlink" title="4. 电子邮件"></a>4. 电子邮件</h2><p>SMTP：TCP连接，端口号25<br><img src="/2021/01/09/%E8%AE%A1%E7%BD%91%E5%BA%94%E7%94%A8%E5%B1%82/%E8%AE%A1%E7%BD%91%E5%BA%94%E7%94%A8%E5%B1%82/电子邮件.png" alt="avatar"></p><h2 id="5-万维网和HTTP"><a href="#5-万维网和HTTP" class="headerlink" title="5. 万维网和HTTP"></a>5. 万维网和HTTP</h2><p>URL用来标识整个互联网当中的某一个资源（文字，视屏，音频等）的位置</p><p>HTTP用来将这些资源传送给用户</p><p>服务器通过TCP 80端口来监听HTTP请求</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h2&gt;&lt;p&gt;应用层的功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文件传输   FTP&lt;/li&gt;
&lt;li&gt;电子邮件   SMTP，POP3&lt;/l
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://asswei7.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
</feed>
